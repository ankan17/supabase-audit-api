events {
    worker_connections 1024;
}

http {
    upstream express_app {
        server app:4000;  # 'app' is the service name we'll use in docker-compose
    }

    # Redirect HTTP traffic to HTTPS
    server {
        listen 80;
        server_name _;

        # Redirect all HTTP requests to HTTPS
        return 301 https://$host$request_uri;
    }

    # HTTPS server block
    server {
        listen 443 ssl;
        server_name _;

        # Paths to the SSL certificate and key (inside the container)
        ssl_certificate     /etc/nginx/certs/live/example.com/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/live/example.com/privkey.pem;

        # Optional: Enforce strong SSL/TLS security settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Enable gzip compression
        gzip on;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";

        # Proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        location / {
            # Adjust this to match your upstream configuration
            proxy_pass http://express_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }
    }
}